0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.4.28
3 info using node@v0.10.33
4 verbose publish [ '.' ]
5 verbose cache add [ '.', null ]
6 verbose cache add name=undefined spec="." args=[".",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: '.',
7 verbose parsed url   path: '.',
7 verbose parsed url   href: '.' }
8 silly lockFile 3a52ce78- .
9 verbose lock . /Users/smc2/.npm/3a52ce78-.lock
10 verbose tar pack [ '/Users/smc2/.npm/node-red-nodes-cf-sqldb-dashdb/0.2.0/package.tgz',
10 verbose tar pack   '.' ]
11 verbose tarball /Users/smc2/.npm/node-red-nodes-cf-sqldb-dashdb/0.2.0/package.tgz
12 verbose folder .
13 info prepublish node-red-nodes-cf-sqldb-dashdb@0.2.0
14 silly lockFile 1f1177db-tar tar://.
15 verbose lock tar://. /Users/smc2/.npm/1f1177db-tar.lock
16 silly lockFile 626300ae-f-sqldb-dashdb-0-2-0-package-tgz tar:///Users/smc2/.npm/node-red-nodes-cf-sqldb-dashdb/0.2.0/package.tgz
17 verbose lock tar:///Users/smc2/.npm/node-red-nodes-cf-sqldb-dashdb/0.2.0/package.tgz /Users/smc2/.npm/626300ae-f-sqldb-dashdb-0-2-0-package-tgz.lock
18 silly lockFile 1f1177db-tar tar://.
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 626300ae-f-sqldb-dashdb-0-2-0-package-tgz tar:///Users/smc2/.npm/node-red-nodes-cf-sqldb-dashdb/0.2.0/package.tgz
21 silly lockFile 626300ae-f-sqldb-dashdb-0-2-0-package-tgz tar:///Users/smc2/.npm/node-red-nodes-cf-sqldb-dashdb/0.2.0/package.tgz
22 silly lockFile 21714d15-es-cf-sqldb-dashdb-0-2-0-package /Users/smc2/.npm/node-red-nodes-cf-sqldb-dashdb/0.2.0/package
23 verbose lock /Users/smc2/.npm/node-red-nodes-cf-sqldb-dashdb/0.2.0/package /Users/smc2/.npm/21714d15-es-cf-sqldb-dashdb-0-2-0-package.lock
24 silly lockFile 21714d15-es-cf-sqldb-dashdb-0-2-0-package /Users/smc2/.npm/node-red-nodes-cf-sqldb-dashdb/0.2.0/package
25 silly lockFile 21714d15-es-cf-sqldb-dashdb-0-2-0-package /Users/smc2/.npm/node-red-nodes-cf-sqldb-dashdb/0.2.0/package
26 silly lockFile 3a52ce78- .
27 silly lockFile 3a52ce78- .
28 silly publish { name: 'node-red-nodes-cf-sqldb-dashdb',
28 silly publish   version: '0.2.0',
28 silly publish   description: 'Node-RED nodes to access SQLDB and dashDB services on Bluemix',
28 silly publish   dependencies: { cfenv: 'x', ibm_db: 'x' },
28 silly publish   repository:
28 silly publish    { type: 'git',
28 silly publish      url: 'https://hub.jazz.net/git/smc2/sqldbdashdb' },
28 silly publish   license: 'Apache',
28 silly publish   keywords: [ 'node-red', 'sqldb', 'dashdb', 'bluemix' ],
28 silly publish   'node-red': { nodes: { 'sqldb-dashdb-cf': '98-sqldb-dashdb-cf.js' } },
28 silly publish   author: { name: 'Steven Chamberlin', email: 'smc2@us.ibm.com' },
28 silly publish   contributors: [ { name: 'Nicholas Vargas', email: 'navargas@us.ibm.com' } ],
28 silly publish   readme: 'node-red-node-cf-sqldb\n=========================\n[Node-RED](http://nodered.org) nodes to work with a database \nin a SQLDB or dashDB service that is integrated with\n[IBM Bluemix](http://bluemix.net).\n\nInstall\n-------\nInstall from [npm](http://npmjs.org)\n```\nnpm install node-red-nodes-cf-sqldb-dashdb\n```\n\nUsage\n-----\nThis package contains 4 nodes -- two pairs of nodes for each of SQLDB and dashDB services.  The node pairs work almost identically, so the documentation contained here\napplies to both.  For each service, a query and an output node is provided.  The query nodes let you issue a query against\nyour SQLDB or dashDB service and pass along the result set in the msg object.  The output nodes store elements from the msg object\ninto your SQLDB or dashDB service database.\n\n\nQuery node usage:\n-----------------\n\nYou will need to fill in the following fields:\n\n-- Service should point to your SQLDB or dashDB service.\n\n-- Query is the SQL select query you wish to execute on your dashDB service database.  If the\nfield is empty, it will get the query from the msg.payload.\n\nThese fields are optional:\n\n-- Parameter Markers is a comma delimited set of json paths.  These will replace any question\nmarks that you place in your SQL query, in the order that they appear.\n\n-- Name: Optionally give your node a name\n\nThe results of your query will be returned as a JSON array in msg.payload.\n\n\nOutput node usage:\n------------------\n\nThe output node will get the values to insert from msg.payload.  \n\nSo for example, you might create a function node that flows into your sqldb output node\nwith code like this:\n\nmsg.payload = \n{\n  TS : \'TIMESTAMP\',\n  SCREENNAME : msg.tweet.user.screen_name,\n  TWEET : msg.payload,\n  SENTIMENT : msg.sentiment.score,\n  LOCATION : msg.location\n}\nreturn msg;\n\nThis would assume that you have a table already created with columns (TS, SCREENNAME, TWEET, SENTIMENT, LOCATION).\n\'TIMESTAMP\' string is a special keyword that the node will replace with a real DB2 timestamp before insertion.\nIf you are missing a required column, an error will be displayed in the debug view.\n\nFor output node configuration, you will need to fill in the following fields:\n\n-- Service should point to your SQLDB or dashDB service.\n\n-- Table should point to the table you wish to insert the values into.\nThis table needs to exist already in the database and needs to contain the\nsame number of columns that you are inserting through this node. The data\ntypes of the columns have to match. The data coming into the node through \nthe msg.payload needs to be in the format accepted by DB2 and within the \nappropriate ranges/parameters for that datatype.\n\nThe following fields are optional:\n\n-- Name: Optionally give your node a name, otherwise the default will be the table name.\n\n\nAuthors\n-------\n* Steven Chamberlin - [smc2@us.ibm.com](mailto:smc2@us.ibm.com)\n* Nicholas Vargas \n',
28 silly publish   readmeFilename: 'README.md',
28 silly publish   _id: 'node-red-nodes-cf-sqldb-dashdb@0.2.0',
28 silly publish   scripts: {},
28 silly publish   _shasum: 'db39812edf7a923a80939283277e96ac710e85ab',
28 silly publish   _from: '.' }
29 verbose request where is /node-red-nodes-cf-sqldb-dashdb
30 verbose request registry https://registry.npmjs.org/
31 verbose request id 89b9023458db2f6b
32 verbose url raw /node-red-nodes-cf-sqldb-dashdb
33 verbose url resolving [ 'https://registry.npmjs.org/',
33 verbose url resolving   './node-red-nodes-cf-sqldb-dashdb' ]
34 verbose url resolved https://registry.npmjs.org/node-red-nodes-cf-sqldb-dashdb
35 verbose request where is https://registry.npmjs.org/node-red-nodes-cf-sqldb-dashdb
36 info trying registry request attempt 1 at 00:01:50
37 http PUT https://registry.npmjs.org/node-red-nodes-cf-sqldb-dashdb
38 http 403 https://registry.npmjs.org/node-red-nodes-cf-sqldb-dashdb
39 verbose headers { date: 'Mon, 19 Jan 2015 08:01:51 GMT',
39 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
39 verbose headers   'content-type': 'application/json',
39 verbose headers   'cache-control': 'max-age=60',
39 verbose headers   'content-length': '5683',
39 verbose headers   'accept-ranges': 'bytes',
39 verbose headers   via: '1.1 varnish',
39 verbose headers   'x-served-by': 'cache-sjc3133-SJC',
39 verbose headers   'x-cache': 'MISS',
39 verbose headers   'x-cache-hits': '0',
39 verbose headers   'x-timer': 'S1421654511.133467,VS0,VE144',
39 verbose headers   'keep-alive': 'timeout=10, max=50',
39 verbose headers   connection: 'Keep-Alive' }
40 error publish Failed PUT 403
41 error Error: forbidden cannot modify pre-existing version: 0.2.0
41 error old={"name":"node-red-nodes-cf-sqldb-dashdb","version":"0.2.0","description":"Node-RED nodes to access SQLDB and dashDB services on Bluemix","dependencies":{"cfenv":"x","ibm_db":"x"},"repository":{"type":"git","url":"https://hub.jazz.net/git/smc2/sqldbdashdb"},"license":"Apache","keywords":["node-red","sqldb","dashdb","bluemix"],"node-red":{"nodes":{"sqldb-dashdb-cf":"98-sqldb-dashdb-cf.js"}},"author":{"name":"Steven Chamberlin","email":"smc2@us.ibm.com"},"contributors":[{"name":"Nicholas Vargas","email":"navargas@us.ibm.com"}],"_id":"node-red-nodes-cf-sqldb-dashdb@0.2.0","scripts":{},"_shasum":"5fc883273014438634eed4c82d74886e58002f6f","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"smc2","email":"smc2@us.ibm.com"},"maintainers":[{"name":"smc2","email":"smc2@us.ibm.com"}],"dist":{"shasum":"5fc883273014438634eed4c82d74886e58002f6f","tarball":"http://registry.npmjs.org/node-red-nodes-cf-sqldb-dashdb/-/node-red-nodes-cf-sqldb-dashdb-0.2.0.tgz"}}
41 error new={"name":"node-red-nodes-cf-sqldb-dashdb","version":"0.2.0","description":"Node-RED nodes to access SQLDB and dashDB services on Bluemix","dependencies":{"cfenv":"x","ibm_db":"x"},"repository":{"type":"git","url":"https://hub.jazz.net/git/smc2/sqldbdashdb"},"license":"Apache","keywords":["node-red","sqldb","dashdb","bluemix"],"node-red":{"nodes":{"sqldb-dashdb-cf":"98-sqldb-dashdb-cf.js"}},"author":{"name":"Steven Chamberlin","email":"smc2@us.ibm.com"},"contributors":[{"name":"Nicholas Vargas","email":"navargas@us.ibm.com"}],"readme":"node-red-node-cf-sqldb\u000a=========================\u000a[Node-RED](http://nodered.org) nodes to work with a database \u000ain a SQLDB or dashDB service that is integrated with\u000a[IBM Bluemix](http://bluemix.net).\u000a\u000aInstall\u000a-------\u000aInstall from [npm](http://npmjs.org)\u000a```\u000anpm install node-red-nodes-cf-sqldb-dashdb\u000a```\u000a\u000aUsage\u000a-----\u000aThis package contains 4 nodes -- two pairs of nodes for each of SQLDB and dashDB services.  The node pairs work almost identically, so the documentation contained here\u000aapplies to both.  For each service, a query and an output node is provided.  The query nodes let you issue a query against\u000ayour SQLDB or dashDB service and pass along the result set in the msg object.  The output nodes store elements from the msg object\u000ainto your SQLDB or dashDB service database.\u000a\u000a\u000aQuery node usage:\u000a-----------------\u000a\u000aYou will need to fill in the following fields:\u000a\u000a-- Service should point to your SQLDB or dashDB service.\u000a\u000a-- Query is the SQL select query you wish to execute on your dashDB service database.  If the\u000afield is empty, it will get the query from the msg.payload.\u000a\u000aThese fields are optional:\u000a\u000a-- Parameter Markers is a comma delimited set of json paths.  These will replace any question\u000amarks that you place in your SQL query, in the order that they appear.\u000a\u000a-- Name: Optionally give your node a name\u000a\u000aThe results of your query will be returned as a JSON array in msg.payload.\u000a\u000a\u000aOutput node usage:\u000a------------------\u000a\u000aThe output node will get the values to insert from msg.payload.  \u000a\u000aSo for example, you might create a function node that flows into your sqldb output node\u000awith code like this:\u000a\u000amsg.payload = \u000a{\u000a  TS : 'TIMESTAMP',\u000a  SCREENNAME : msg.tweet.user.screen_name,\u000a  TWEET : msg.payload,\u000a  SENTIMENT : msg.sentiment.score,\u000a  LOCATION : msg.location\u000a}\u000areturn msg;\u000a\u000aThis would assume that you have a table already created with columns (TS, SCREENNAME, TWEET, SENTIMENT, LOCATION).\u000a'TIMESTAMP' string is a special keyword that the node will replace with a real DB2 timestamp before insertion.\u000aIf you are missing a required column, an error will be displayed in the debug view.\u000a\u000aFor output node configuration, you will need to fill in the following fields:\u000a\u000a-- Service should point to your SQLDB or dashDB service.\u000a\u000a-- Table should point to the table you wish to insert the values into.\u000aThis table needs to exist already in the database and needs to contain the\u000asame number of columns that you are inserting through this node. The data\u000atypes of the columns have to match. The data coming into the node through \u000athe msg.payload needs to be in the format accepted by DB2 and within the \u000aappropriate ranges/parameters for that datatype.\u000a\u000aThe following fields are optional:\u000a\u000a-- Name: Optionally give your node a name, otherwise the default will be the table name.\u000a\u000a\u000aAuthors\u000a-------\u000a* Steven Chamberlin - [smc2@us.ibm.com](mailto:smc2@us.ibm.com)\u000a* Nicholas Vargas \u000a","readmeFilename":"README.md","_id":"node-red-nodes-cf-sqldb-dashdb@0.2.0","scripts":{},"_shasum":"db39812edf7a923a80939283277e96ac710e85ab","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"smc2","email":"smc2@us.ibm.com"},"maintainers":[{"name":"smc2","email":"smc2@us.ibm.com"}],"dist":{"shasum":"db39812edf7a923a80939283277e96ac710e85ab","tarball":"http://registry.npmjs.org/node-red-nodes-cf-sqldb-dashdb/-/node-red-nodes-cf-sqldb-dashdb-0.2.0.tgz"}}: node-red-nodes-cf-sqldb-dashdb
41 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:308:14)
41 error     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:246:65)
41 error     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:236:22)
41 error     at Request.emit (events.js:98:17)
41 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1142:14)
41 error     at Request.emit (events.js:117:20)
41 error     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1096:12)
41 error     at IncomingMessage.emit (events.js:117:20)
41 error     at _stream_readable.js:943:16
41 error     at process._tickCallback (node.js:419:13)
42 error If you need help, you may report this *entire* log,
42 error including the npm and node versions, at:
42 error     <http://github.com/npm/npm/issues>
43 error System Darwin 14.0.0
44 error command "node" "/usr/local/bin/npm" "publish"
45 error cwd /Users/smc2/node-red-nodes-cf-sqldb-dashdb
46 error node -v v0.10.33
47 error npm -v 1.4.28
48 verbose exit [ 1, true ]
